{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","state","isLoaded","currentLocation","currentTime","items","searchCity","getDate","d","day","getDay","date","month","getMonth","year","getFullYear","getTime","t","getHours","handleSearchInput","e","setState","target","value","handleSearchSubmit","console","log","query","fetch","then","res","json","result","preventDefault","this","lat","lon","error","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetchWeather","weather","className","Date","action","onSubmit","placeholder","type","onChange","name","sys","country","description","src","icon","alt","Math","round","main","temp","id","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","require","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.646cbc89.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./App.scss\";\n\nconst api = {\n\tkey: \"e8ad1adef88349968665b0d70b156a49\",\n\tbase: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nclass App extends Component {\n\tstate = {\n\t\tisLoaded: false,\n\t\tcurrentLocation: {},\n\t\tcurrentTime: null,\n\t\titems: {},\n\t\tsearchCity: \"\"\n\t};\n\n\tfetchWeather() {\n\t\tfetch(\n\t\t\t`${api.base}weather?lat=${this.state.currentLocation.lat}&lon=${this.state.currentLocation.lon}&units=metric&APPID=${api.key}`\n\t\t)\n\t\t\t.then(res => res.json())\n\t\t\t.then(\n\t\t\t\tresult => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\titems: result\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t}\n\n\tasync componentDidMount() {\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tif (navigator.geolocation) {\n\t\t\t\tnavigator.geolocation.getCurrentPosition(position => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcurrentLocation: {\n\t\t\t\t\t\t\tlat: position.coords.latitude,\n\t\t\t\t\t\t\tlon: position.coords.longitude\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis.fetchWeather();\n\t}\n\n\tgetDate = d => {\n\t\tlet months = [\n\t\t\t\"January\",\n\t\t\t\"February\",\n\t\t\t\"March\",\n\t\t\t\"April\",\n\t\t\t\"May\",\n\t\t\t\"June\",\n\t\t\t\"July\",\n\t\t\t\"August\",\n\t\t\t\"September\",\n\t\t\t\"October\",\n\t\t\t\"November\",\n\t\t\t\"December\"\n\t\t];\n\t\tlet days = [\n\t\t\t\"Sunday\",\n\t\t\t\"Monday\",\n\t\t\t\"Tuesday\",\n\t\t\t\"Wednesday\",\n\t\t\t\"Thursday\",\n\t\t\t\"Friday\",\n\t\t\t\"Saturday\"\n\t\t];\n\n\t\tlet day = days[d.getDay()];\n\t\tlet date = d.getDate();\n\t\tlet month = months[d.getMonth()];\n\t\tlet year = d.getFullYear();\n\n\t\treturn `${day} ${date} ${month} ${year}`;\n\t};\n\n\tgetTime = t => {\n\t\tif (t.getHours() < 6 || t.getHours() > 18) {\n\t\t\treturn \"night\";\n\t\t} else {\n\t\t\treturn \"day\";\n\t\t}\n\t};\n\n\thandleSearchInput = e => {\n\t\tthis.setState({searchCity: e.target.value});\n\t};\n\n\thandleSearchSubmit = e => {\n\t\tconsole.log(\"A name was submitted: \" + this.state.searchCity);\n\t\tconst query = this.state.searchCity;\n\t\tfetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n\t\t\t.then(res => res.json())\n\t\t\t.then(result => {\n\t\t\t\tthis.setState({\n\t\t\t\t\titems: result\n\t\t\t\t});\n\t\t\t});\n\t\te.preventDefault();\n\t};\n\n\trender() {\n\t\tlet weather = null;\n\t\tif (this.state.isLoaded) {\n\t\t\tweather = (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<div className={`${this.getTime(new Date())} wrapper`}>\n\t\t\t\t\t\t<div className=\"weather\">\n\t\t\t\t\t\t\t<div className=\"weather-search\">\n\t\t\t\t\t\t\t\t<form\n\t\t\t\t\t\t\t\t\taction=\"\"\n\t\t\t\t\t\t\t\t\tonSubmit={this.handleSearchSubmit}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Search by city\"\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tonChange={this.handleSearchInput}\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.searchCity}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<button type=\"submit\">Search</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"weather-info\">\n\t\t\t\t\t\t\t\t<p className=\"weather-title\">\n\t\t\t\t\t\t\t\t\t{this.state.items.name}{\" \"}\n\t\t\t\t\t\t\t\t\t{this.state.items.sys.country}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p>{this.getDate(new Date())}</p>\n\t\t\t\t\t\t\t\t<div className=\"weather-info-left\">\n\t\t\t\t\t\t\t\t\t<p className=\"weather-description\">\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.state.items.weather[0]\n\t\t\t\t\t\t\t\t\t\t\t\t.description\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"weather-image\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${this.state.items.weather[0].icon}.png`}\n\t\t\t\t\t\t\t\t\t\t\talt={\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.items.weather[0]\n\t\t\t\t\t\t\t\t\t\t\t\t\t.description\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t{Math.round(\n\t\t\t\t\t\t\t\t\t\t\tthis.state.items.main.temp,\n\t\t\t\t\t\t\t\t\t\t\t0\n\t\t\t\t\t\t\t\t\t\t)}{\" \"}\n\t\t\t\t\t\t\t\t\t\t&deg;C\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"weather-info-right\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{weather}\n\t\t\t\t<div id=\"demo\"></div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('typeface-open-sans');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}