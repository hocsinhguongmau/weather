{"version":3,"sources":["components/Weather/CurrentWeather.js","components/Weather/HourlyWeather.js","components/Weather/Weathers.js","Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["CurrentWeather","props","currentWeatherValue","currentWeather","isLoaded","searchStatus","className","currentLocation","getDate","Date","summary","src","process","icon","alt","Math","round","temperature","FtoC","HourlyWeather","hourlyWeatherValue","data","hourlyWeather","i","length","push","name","updateTime","time","temp","width","height","type","dataKey","stroke","strokeDasharray","label","value","position","offset","angle","api","Weathers","state","currentCoordinates","currentTime","newCoordinates","d","day","getDay","date","month","getMonth","year","getFullYear","lat","lon","fetch","then","res","json","result","setState","currently","hourly","error","this","getLocationName","Geocode","setApiKey","setLanguage","fromLatLng","response","address","results","console","log","formatted_address","fromAddress","coordinates","geometry","location","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","fetchLocation","getHours","getMinutes","substr","lng","toFixed","placeholder","onPlaceSelected","place","undefined","fetchWithCoordinates","fetchWithName","types","href","onClick","getHourOnly","Component","Layout","getTime","t","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","require","ReactDOM","render","document","getElementById","URL","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d43f7f04.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CurrentWeather = props => {\r\n\tlet currentWeatherValue = null;\r\n\tlet currentWeather = props.currentWeather;\r\n\r\n\tif (props.isLoaded === true && props.searchStatus === true) {\r\n\t\tcurrentWeatherValue = (\r\n\t\t\t<div className=\"weather-info\">\r\n\t\t\t\t<p className=\"weather-title\">{props.currentLocation}</p>\r\n\t\t\t\t<p>{props.getDate(new Date())}</p>\r\n\t\t\t\t<div className=\"weather-info-left\">\r\n\t\t\t\t\t<p className=\"weather-description\">\r\n\t\t\t\t\t\t{currentWeather.summary}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p className=\"weather-image\">\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={\r\n\t\t\t\t\t\t\t\tprocess.env.PUBLIC_URL +\r\n\t\t\t\t\t\t\t\t`/images/icons/${currentWeather.icon}.svg`\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\talt={currentWeather.summary}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<span className=\"degF\">\r\n\t\t\t\t\t\t\t{Math.round(currentWeather.temperature, 0)} &deg;F\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span className=\"degC\">\r\n\t\t\t\t\t\t\t{Math.round(\r\n\t\t\t\t\t\t\t\tprops.FtoC(currentWeather.temperature),\r\n\t\t\t\t\t\t\t\t2\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t&deg;C\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\tcurrentWeatherValue = <p className=\"not-found\">{props.searchStatus}</p>;\r\n\t}\r\n\treturn <div>{currentWeatherValue}</div>;\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from \"react\";\r\nimport {\r\n\tLineChart,\r\n\tLine,\r\n\tCartesianGrid,\r\n\tXAxis,\r\n\tYAxis,\r\n\tTooltip,\r\n\tResponsiveContainer\r\n} from \"recharts\";\r\n\r\nconst HourlyWeather = props => {\r\n\tlet data = [];\r\n\tlet hourlyWeatherValue = null;\r\n\r\n\tif (props.isLoaded === true && props.searchStatus === true) {\r\n\t\tconst hourlyWeather = props.hourlyWeather;\r\n\t\tfor (let i = 0; i < hourlyWeather.data.length; i++) {\r\n\t\t\tdata.push({\r\n\t\t\t\tname: props.updateTime(hourlyWeather.data[i].time),\r\n\t\t\t\ttemp: props.FtoC(hourlyWeather.data[i].temperature)\r\n\t\t\t});\r\n\t\t\tif (i > 10) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thourlyWeatherValue = (\r\n\t\t<div>\r\n\t\t\t<h2 className=\"small-title\">Weather forecast hourly</h2>\r\n\t\t\t<ResponsiveContainer width=\"100%\" height={400}>\r\n\t\t\t\t<LineChart data={data}>\r\n\t\t\t\t\t<Line type=\"monotone\" dataKey=\"temp\" stroke=\"#8884d8\" />\r\n\t\t\t\t\t<CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\r\n\t\t\t\t\t<XAxis\r\n\t\t\t\t\t\tdataKey=\"name\"\r\n\t\t\t\t\t\tlabel={{\r\n\t\t\t\t\t\t\tvalue: \"Hour\",\r\n\t\t\t\t\t\t\tposition: \"bottom\",\r\n\t\t\t\t\t\t\toffset: -10\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<YAxis\r\n\t\t\t\t\t\tlabel={{\r\n\t\t\t\t\t\t\tvalue: \"Temperature\",\r\n\t\t\t\t\t\t\tangle: -90,\r\n\t\t\t\t\t\t\tposition: \"left\",\r\n\t\t\t\t\t\t\toffset: -10\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Tooltip />\r\n\t\t\t\t</LineChart>\r\n\t\t\t</ResponsiveContainer>\r\n\t\t</div>\r\n\t);\r\n\r\n\treturn <div>{hourlyWeatherValue}</div>;\r\n};\r\n\r\nexport default HourlyWeather;\r\n","import React, {Component} from \"react\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport Geocode from \"react-geocode\";\r\nimport CurrentWeather from \"./CurrentWeather\";\r\nimport HourlyWeather from \"./HourlyWeather\";\r\n\r\nconst api = {\r\n\tkey: \"e985b57d27d16a6af5f72b816e5afe31\",\r\n\tbase: \"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast\"\r\n};\r\n\r\nclass Weathers extends Component {\r\n\tstate = {\r\n\t\tisLoaded: false,\r\n\t\tcurrentCoordinates: {},\r\n\t\tcurrentLocation: \"\",\r\n\t\tcurrentTime: null,\r\n\t\tcurrentWeather: {},\r\n\t\tsearchStatus: false,\r\n\t\tnewCoordinates: {},\r\n\t\thourlyWeather: {}\r\n\t};\r\n\tfetchLocation(lat, lon) {\r\n\t\tfetch(`${api.base}/${api.key}/${lat},${lon}`)\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(\r\n\t\t\t\tresult => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tisLoaded: true,\r\n\t\t\t\t\t\tcurrentWeather: result.currently,\r\n\t\t\t\t\t\thourlyWeather: result.hourly,\r\n\t\t\t\t\t\tsearchStatus: true\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\terror => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tisLoaded: true,\r\n\t\t\t\t\t\tsearchStatus: \"Searching...\",\r\n\t\t\t\t\t\terror\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t.then(this.getLocationName(lat, lon));\r\n\t}\r\n\r\n\tgetLocationName(lat, lon) {\r\n\t\tGeocode.setApiKey(\"AIzaSyCO9x6JVamwo9b09PmJkpkUrYR3FI9mK6A\");\r\n\t\tGeocode.setLanguage(\"en\");\r\n\t\tGeocode.fromLatLng(lat, lon).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tconst address = response.results[0];\r\n\t\t\t\tconsole.log(address);\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tcurrentLocation: address.formatted_address\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tthis.setState({currentLocation: \"Location not found\"});\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgetLocationCoordinates(name) {\r\n\t\tGeocode.fromAddress(name).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tconst coordinates = response.results[0].geometry.location;\r\n\t\t\t\tthis.setState({newCoordinates: coordinates});\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tthis.setState({newCoordinates: \"City not found\"});\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tawait new Promise((resolve, reject) => {\r\n\t\t\tif (navigator.geolocation) {\r\n\t\t\t\tnavigator.geolocation.getCurrentPosition(position => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tcurrentCoordinates: {\r\n\t\t\t\t\t\t\tlat: position.coords.latitude,\r\n\t\t\t\t\t\t\tlon: position.coords.longitude\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.fetchLocation(\r\n\t\t\tthis.state.currentCoordinates.lat,\r\n\t\t\tthis.state.currentCoordinates.lon\r\n\t\t);\r\n\t}\r\n\r\n\tgetDate = d => {\r\n\t\tlet months = [\r\n\t\t\t\"January\",\r\n\t\t\t\"February\",\r\n\t\t\t\"March\",\r\n\t\t\t\"April\",\r\n\t\t\t\"May\",\r\n\t\t\t\"June\",\r\n\t\t\t\"July\",\r\n\t\t\t\"August\",\r\n\t\t\t\"September\",\r\n\t\t\t\"October\",\r\n\t\t\t\"November\",\r\n\t\t\t\"December\"\r\n\t\t];\r\n\t\tlet days = [\r\n\t\t\t\"Sunday\",\r\n\t\t\t\"Monday\",\r\n\t\t\t\"Tuesday\",\r\n\t\t\t\"Wednesday\",\r\n\t\t\t\"Thursday\",\r\n\t\t\t\"Friday\",\r\n\t\t\t\"Saturday\"\r\n\t\t];\r\n\r\n\t\tlet day = days[d.getDay()];\r\n\t\tlet date = d.getDate();\r\n\t\tlet month = months[d.getMonth()];\r\n\t\tlet year = d.getFullYear();\r\n\r\n\t\treturn `${day} ${date} ${month} ${year}`;\r\n\t};\r\n\r\n\tupdateTime(time) {\r\n\t\tconst date = new Date(time * 1000);\r\n\t\tconst hours = date.getHours();\r\n\t\tconst minutes = \"0\" + date.getMinutes();\r\n\r\n\t\treturn hours + \":\" + minutes.substr(-2);\r\n\t}\r\n\r\n\tgetHourOnly(time) {\r\n\t\tconst date = new Date(time * 1000);\r\n\t\tconst hours = date.getHours();\r\n\t\treturn hours;\r\n\t}\r\n\r\n\tasync fetchWithName(name) {\r\n\t\tawait new Promise((resolve, reject) => {\r\n\t\t\tGeocode.fromAddress(name).then(\r\n\t\t\t\tresponse => {\r\n\t\t\t\t\tconst coordinates = response.results[0].geometry.location;\r\n\t\t\t\t\tthis.setState({newCoordinates: coordinates});\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t},\r\n\t\t\t\terror => {\r\n\t\t\t\t\tthis.setState({searchStatus: \"City not found\"});\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t\tthis.fetchLocation(\r\n\t\t\tthis.state.newCoordinates.lat,\r\n\t\t\tthis.state.newCoordinates.lng\r\n\t\t);\r\n\t}\r\n\r\n\tfetchWithCoordinates(lat, lon) {\r\n\t\tthis.fetchLocation(lat, lon);\r\n\t}\r\n\r\n\tFtoC(temp) {\r\n\t\treturn (((temp - 32) * 5) / 9).toFixed(2);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"weather-search\">\r\n\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\tplaceholder=\"Search by city\"\r\n\t\t\t\t\t\tonPlaceSelected={place => {\r\n\t\t\t\t\t\t\tif (place.name === undefined) {\r\n\t\t\t\t\t\t\t\tthis.fetchWithCoordinates(\r\n\t\t\t\t\t\t\t\t\tplace.geometry.location.lat(),\r\n\t\t\t\t\t\t\t\t\tplace.geometry.location.lng()\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.fetchWithName(place.name);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\ttypes={[\"(regions)\"]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<a\r\n\t\t\t\t\t\tclassName=\"current-location\"\r\n\t\t\t\t\t\thref=\"#\"\r\n\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\tthis.fetchLocation(\r\n\t\t\t\t\t\t\t\tthis.state.currentCoordinates.lat,\r\n\t\t\t\t\t\t\t\tthis.state.currentCoordinates.lon\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tUse your current location\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<CurrentWeather\r\n\t\t\t\t\tisLoaded={this.state.isLoaded}\r\n\t\t\t\t\tsearchStatus={this.state.searchStatus}\r\n\t\t\t\t\tgetDate={this.getDate}\r\n\t\t\t\t\tcurrentLocation={this.state.currentLocation}\r\n\t\t\t\t\tFtoC={this.FtoC}\r\n\t\t\t\t\tcurrentWeather={this.state.currentWeather}\r\n\t\t\t\t/>\r\n\t\t\t\t<HourlyWeather\r\n\t\t\t\t\tisLoaded={this.state.isLoaded}\r\n\t\t\t\t\tsearchStatus={this.state.searchStatus}\r\n\t\t\t\t\tFtoC={this.FtoC}\r\n\t\t\t\t\thourlyWeather={this.state.hourlyWeather}\r\n\t\t\t\t\tupdateTime={this.updateTime}\r\n\t\t\t\t\tgetHourOnly={this.getHourOnly}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Weathers;\r\n","import React, {Component} from \"react\";\r\nimport Weathers from \"../components/Weather/Weathers\";\r\n\r\nclass Layout extends Component {\r\n\tgetTime = t => {\r\n\t\tif (t.getHours() < 6 || t.getHours() > 18) {\r\n\t\t\treturn \"night\";\r\n\t\t} else {\r\n\t\t\treturn \"day\";\r\n\t\t}\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={`${this.getTime(new Date())} wrapper`}>\r\n\t\t\t\t<div className=\"weather\">\r\n\t\t\t\t\t<Weathers />\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Layout;\r\n","import React, {Component} from \"react\";\nimport Layout from \"./Layout/Layout\";\n\nimport \"./App.scss\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Layout />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('typeface-open-sans');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}