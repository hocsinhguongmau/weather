{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","state","isLoaded","currentLocation","items","fetch","this","lat","lon","then","res","json","result","setState","error","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetchWeather","weather","name","sys","country","id","main","description","src","icon","alt","Math","round","temp","feels_like","humidity","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2654f0ce.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./App.scss\";\n\nconst api = {\n\tkey: \"e8ad1adef88349968665b0d70b156a49\",\n\tbase: \"https://api.openweathermap.org/data/2.5/\"\n};\nclass App extends Component {\n\tstate = {\n\t\tisLoaded: false,\n\t\tcurrentLocation: {},\n\t\titems: {}\n\t};\n\n\tfetchWeather() {\n\t\tfetch(\n\t\t\t`${api.base}weather?lat=${this.state.currentLocation.lat}&lon=${this.state.currentLocation.lon}&units=metric&APPID=${api.key}`\n\t\t)\n\t\t\t.then(res => res.json())\n\t\t\t.then(\n\t\t\t\tresult => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\titems: result\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t}\n\n\tasync componentDidMount() {\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tif (navigator.geolocation) {\n\t\t\t\tnavigator.geolocation.getCurrentPosition(position => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcurrentLocation: {\n\t\t\t\t\t\t\tlat: position.coords.latitude,\n\t\t\t\t\t\t\tlon: position.coords.longitude\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis.fetchWeather();\n\t}\n\n\trender() {\n\t\tlet weather = null;\n\t\tif (this.state.isLoaded) {\n\t\t\tweather = (\n\t\t\t\t<div>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{this.state.items.name} {this.state.items.sys.country}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>{this.state.items.sys.id}</p>\n\t\t\t\t\t<p>{this.state.items.weather[0].main}</p>\n\t\t\t\t\t<p>{this.state.items.weather[0].description}</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${this.state.items.weather[0].icon}.png`}\n\t\t\t\t\t\t\talt={this.state.items.weather[0].description}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tTemp {Math.round(this.state.items.main.temp, 0)}&deg;C\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tFeels like{\" \"}\n\t\t\t\t\t\t{Math.round(this.state.items.main.feels_like, 0)}&deg;C\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>Humidity {this.state.items.main.humidity}%</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{weather}\n\t\t\t\t<div id=\"demo\"></div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}