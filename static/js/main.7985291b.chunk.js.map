{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","state","isLoaded","currentLocation","currentTime","currentWeather","searchCity","searchStatus","getDate","d","day","getDay","date","month","getMonth","year","getFullYear","getTime","t","getHours","handleSearchInput","e","setState","handleErrors","response","ok","Error","statusText","fetch","this","lat","lon","then","res","json","result","error","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetchWeather","query","catch","weatherValue","className","name","sys","country","Date","weather","description","src","process","icon","alt","Math","round","main","temp","placeholder","onPlaceSelected","place","undefined","formatted_address","fetchWithName","types","href","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","require","ReactDOM","render","document","getElementById","URL","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7985291b.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport \"./App.scss\";\n\nconst api = {\n\tkey: \"e8ad1adef88349968665b0d70b156a49\",\n\tbase: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nclass App extends Component {\n\tstate = {\n\t\tisLoaded: false,\n\t\tcurrentLocation: {},\n\t\tcurrentTime: null,\n\t\tcurrentWeather: {},\n\t\tsearchCity: \"\",\n\t\tsearchStatus: false\n\t};\n\n\tfetchWeather() {\n\t\tfetch(\n\t\t\t`${api.base}weather?lat=${this.state.currentLocation.lat}&lon=${this.state.currentLocation.lon}&units=metric&APPID=${api.key}`\n\t\t)\n\t\t\t.then(res => res.json())\n\t\t\t.then(\n\t\t\t\tresult => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\tcurrentWeather: result,\n\t\t\t\t\t\tsearchStatus: true\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\tsearchStatus: \"Searching...\",\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t}\n\n\tasync componentDidMount() {\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tif (navigator.geolocation) {\n\t\t\t\tnavigator.geolocation.getCurrentPosition(position => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcurrentLocation: {\n\t\t\t\t\t\t\tlat: position.coords.latitude,\n\t\t\t\t\t\t\tlon: position.coords.longitude\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis.fetchWeather();\n\t}\n\n\tgetDate = d => {\n\t\tlet months = [\n\t\t\t\"January\",\n\t\t\t\"February\",\n\t\t\t\"March\",\n\t\t\t\"April\",\n\t\t\t\"May\",\n\t\t\t\"June\",\n\t\t\t\"July\",\n\t\t\t\"August\",\n\t\t\t\"September\",\n\t\t\t\"October\",\n\t\t\t\"November\",\n\t\t\t\"December\"\n\t\t];\n\t\tlet days = [\n\t\t\t\"Sunday\",\n\t\t\t\"Monday\",\n\t\t\t\"Tuesday\",\n\t\t\t\"Wednesday\",\n\t\t\t\"Thursday\",\n\t\t\t\"Friday\",\n\t\t\t\"Saturday\"\n\t\t];\n\n\t\tlet day = days[d.getDay()];\n\t\tlet date = d.getDate();\n\t\tlet month = months[d.getMonth()];\n\t\tlet year = d.getFullYear();\n\n\t\treturn `${day} ${date} ${month} ${year}`;\n\t};\n\n\tgetTime = t => {\n\t\tif (t.getHours() < 6 || t.getHours() > 18) {\n\t\t\treturn \"night\";\n\t\t} else {\n\t\t\treturn \"day\";\n\t\t}\n\t};\n\n\thandleSearchInput = e => {\n\t\tthis.setState({searchCity: e});\n\t};\n\n\thandleErrors = response => {\n\t\tif (!response.ok) {\n\t\t\tthrow Error(response.statusText);\n\t\t}\n\t\treturn response;\n\t};\n\n\tfetchWithName() {\n\t\tconst query = this.state.searchCity;\n\t\tfetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n\t\t\t.then(this.handleErrors)\n\t\t\t.then(res => res.json())\n\t\t\t.then(result => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentWeather: result,\n\t\t\t\t\tsearchStatus: true\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchStatus: \"City not found!\"\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tfetchWithCoordinates() {\n\t\tconst query = this.state.searchCity;\n\t\tfetch(\n\t\t\t`${api.base}weather?lat=${query[0]}&lon=${\n\t\t\t\tquery[1]\n\t\t\t}&units=metric&APPID=${api.key}`\n\t\t)\n\t\t\t.then(this.handleErrors)\n\t\t\t.then(res => res.json())\n\t\t\t.then(result => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentWeather: result,\n\t\t\t\t\tsearchStatus: true\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tsearchStatus: \"City not found!\"\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\trender() {\n\t\tlet weatherValue = null;\n\t\tlet currentWeather = this.state.currentWeather;\n\t\tif (this.state.isLoaded && this.state.searchStatus) {\n\t\t\tweatherValue = (\n\t\t\t\t<div className=\"weather-info\">\n\t\t\t\t\t<p className=\"weather-title\">\n\t\t\t\t\t\t{currentWeather.name},&nbsp;\n\t\t\t\t\t\t{currentWeather.sys.country}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>{this.getDate(new Date())}</p>\n\t\t\t\t\t<div className=\"weather-info-left\">\n\t\t\t\t\t\t<p className=\"weather-description\">\n\t\t\t\t\t\t\t{currentWeather.weather[0].description}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p className=\"weather-image\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\tprocess.env.PUBLIC_URL +\n\t\t\t\t\t\t\t\t\t`/images/animated-icons/${currentWeather.weather[0].icon}.svg`\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\talt={currentWeather.weather[0].description}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{Math.round(currentWeather.main.temp, 0)} &deg;C\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\tweatherValue = <p>{this.state.searchStatus}</p>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className={`${this.getTime(new Date())} wrapper`}>\n\t\t\t\t\t<div className=\"weather\">\n\t\t\t\t\t\t<div className=\"weather-search\">\n\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\tplaceholder=\"Search by city or postal code\"\n\t\t\t\t\t\t\t\tonPlaceSelected={place => {\n\t\t\t\t\t\t\t\t\tif (place.name === undefined) {\n\t\t\t\t\t\t\t\t\t\t// this.handleSearchInput([\n\t\t\t\t\t\t\t\t\t\t// \tplace.geometry.location.lat(),\n\t\t\t\t\t\t\t\t\t\t// \tplace.geometry.location.lng()\n\t\t\t\t\t\t\t\t\t\t// ]);\n\t\t\t\t\t\t\t\t\t\t// this.fetchWithCoordinates();\n\t\t\t\t\t\t\t\t\t\tthis.handleSearchInput(\n\t\t\t\t\t\t\t\t\t\t\tplace.formatted_address\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tthis.fetchWithName();\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis.handleSearchInput(place.name);\n\t\t\t\t\t\t\t\t\t\tthis.fetchWithName();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\ttypes={[\"(regions)\"]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<a className=\"current-location\" href=\"#\" onClick={() => this.fetchWeather()}>\n\t\t\t\t\t\t\t\tUse your current location\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{weatherValue}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('typeface-open-sans');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}