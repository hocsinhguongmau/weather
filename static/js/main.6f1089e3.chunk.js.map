{"version":3,"sources":["components/Weather/CurrentWeather.js","components/Weather/HourlyWeather.js","components/Weather/Weathers.js","Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["CurrentWeather","props","currentWeatherValue","currentWeather","isLoaded","searchStatus","className","currentLocation","getDate","Date","summary","src","process","icon","alt","Math","round","temperature","FtoC","HourlyWeather","hourlyWeatherValue","data","hourlyWeather","i","length","push","name","updateTime","time","temp","width","height","fontSize","type","dataKey","stroke","strokeDasharray","label","value","position","offset","color","interval","allowDecimals","angle","api","Weathers","state","currentCoordinates","currentTime","newCoordinates","d","day","getDay","date","month","getMonth","year","getFullYear","lat","lon","fetch","then","res","json","result","setState","currently","hourly","error","this","getLocationName","Geocode","setApiKey","setLanguage","fromLatLng","response","address","results","address_components","long_name","short_name","fromAddress","coordinates","geometry","location","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","fetchLocation","getHours","getMinutes","substr","lng","toFixed","placeholder","onPlaceSelected","place","undefined","fetchWithCoordinates","fetchWithName","types","href","onClick","getHourOnly","Component","Layout","getTime","t","App","Boolean","window","hostname","match","require","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gTA2CeA,EAzCQ,SAAAC,GACtB,IAAIC,EAAsB,KACtBC,EAAiBF,EAAME,eAoC3B,OAjCCD,GADsB,IAAnBD,EAAMG,WAA4C,IAAvBH,EAAMI,aAEnC,yBAAKC,UAAU,gBACd,uBAAGA,UAAU,iBAAiBL,EAAMM,iBACpC,2BAAIN,EAAMO,QAAQ,IAAIC,OACtB,yBAAKH,UAAU,qBACd,uBAAGA,UAAU,uBACXH,EAAeO,SAEjB,uBAAGJ,UAAU,iBACZ,yBACCK,IACCC,WAAA,wBACiBT,EAAeU,KADhC,QAGDC,IAAKX,EAAeO,UAErB,0BAAMJ,UAAU,QACdS,KAAKC,MAAMb,EAAec,YAAa,GADzC,UAGA,0BAAMX,UAAU,QACdS,KAAKC,MACLf,EAAMiB,KAAKf,EAAec,aAC1B,GAHF,YAYkB,uBAAGX,UAAU,aAAaL,EAAMI,cAEhD,6BAAMH,I,QCwBCiB,EArDO,SAAAlB,GACrB,IACImB,EADAC,EAAO,GAGX,IAAuB,IAAnBpB,EAAMG,WAA4C,IAAvBH,EAAMI,aAEpC,IADA,IAAMiB,EAAgBrB,EAAMqB,cACnBC,EAAI,EAAGA,EAAID,EAAcD,KAAKG,SACtCH,EAAKI,KAAK,CACTC,KAAMzB,EAAM0B,WAAWL,EAAcD,KAAKE,GAAGK,MAC7CC,KAAM5B,EAAMiB,KAAKI,EAAcD,KAAKE,GAAGN,iBAEpCM,EAAI,IALsCA,KA4ChD,OAjCAH,EACC,6BACC,wBAAId,UAAU,eAAd,2BACA,kBAAC,IAAD,CAAqBwB,MAAM,OAAOC,OAAQ,KACzC,kBAAC,IAAD,CAAWV,KAAMA,EAAMW,SAAS,MAC/B,kBAAC,IAAD,CAAMC,KAAK,WAAWC,QAAQ,OAAOC,OAAO,YAC5C,kBAAC,IAAD,CAAeA,OAAO,OAAOC,gBAAgB,QAC7C,kBAAC,IAAD,CACCF,QAAQ,OACRG,MAAO,CACNC,MAAO,OACPC,SAAU,SACVC,QAAS,EACTR,SAAU,GACVS,MAAO,QAERC,SAAU,IAEX,kBAAC,IAAD,CACCC,eAAe,EACfN,MAAO,CACNC,MAAO,cACPM,OAAQ,GACRZ,SAAU,GACVS,MAAO,UAGT,kBAAC,IAAD,SAMG,6BAAMrB,ICvDRyB,EACA,mCADAA,EAEC,oEAwNQC,E,2MApNdC,MAAQ,CACP3C,UAAU,EACV4C,mBAAoB,GACpBzC,gBAAiB,GACjB0C,YAAa,KACb9C,eAAgB,GAChBE,cAAc,EACd6C,eAAgB,GAChB5B,cAAe,I,EA+EhBd,QAAU,SAAC2C,GACV,IAwBIC,EAVO,CACV,SACA,SACA,UACA,YACA,WACA,SACA,YAGcD,EAAEE,UACbC,EAAOH,EAAE3C,UACT+C,EA1BS,CACZ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAckBJ,EAAEK,YACjBC,EAAON,EAAEO,cAEb,MAAM,GAAN,OAAUN,EAAV,YAAiBE,EAAjB,YAAyBC,EAAzB,YAAkCE,I,6EA3GrBE,EAAKC,GAAM,IAAD,OACvBC,MAAM,GAAD,OAAIhB,EAAJ,YAAgBA,EAAhB,YAA2Bc,EAA3B,YAAkCC,IACrCE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACA,SAACG,GACA,EAAKC,SAAS,CACb9D,UAAU,EACVD,eAAgB8D,EAAOE,UACvB7C,cAAe2C,EAAOG,OACtB/D,cAAc,OAGhB,SAACgE,GACA,EAAKH,SAAS,CACb9D,UAAU,EACVC,aAAc,eACdgE,aAIFP,KAAKQ,KAAKC,gBAAgBZ,EAAKC,M,sCAGlBD,EAAKC,GAAM,IAAD,OACzBY,IAAQC,UAAU,2CAClBD,IAAQE,YAAY,MACpBF,IAAQG,WAAWhB,EAAKC,GAAKE,MAC5B,SAACc,GACA,IAAMC,EAAUD,EAASE,QAAQ,GAC3BtD,EAASqD,EAAQE,mBAAmBvD,OAC1C,EAAK0C,SAAS,CACb3D,gBAAgB,GAAD,OACdsE,EAAQE,mBAAmBvD,EAAS,GAAGwD,UADzB,YAEXH,EAAQE,mBAAmBvD,EAAS,GAAGwD,UAF5B,YAGdH,EAAQE,mBAAmBvD,EAAS,GAAGyD,iBAI1C,SAACZ,GACA,EAAKH,SAAS,CAAE3D,gBAAiB,4B,6CAKbmB,GAAO,IAAD,OAC5B8C,IAAQU,YAAYxD,GAAMoC,MACzB,SAACc,GACA,IAAMO,EAAcP,EAASE,QAAQ,GAAGM,SAASC,SACjD,EAAKnB,SAAS,CAAEhB,eAAgBiC,OAEjC,SAACd,GACA,EAAKH,SAAS,CAAEhB,eAAgB,wB,+KAM5B,IAAIoC,SAAQ,SAACC,EAASC,GACvBC,UAAUC,aACbD,UAAUC,YAAYC,oBAAmB,SAACpD,GACzC,EAAK2B,SAAS,CACblB,mBAAoB,CACnBW,IAAKpB,EAASqD,OAAOC,SACrBjC,IAAKrB,EAASqD,OAAOE,aAGvBP,U,OAKHjB,KAAKyB,cACJzB,KAAKvB,MAAMC,mBAAmBW,IAC9BW,KAAKvB,MAAMC,mBAAmBY,K,uIAqCrBhC,GACV,IAAM0B,EAAO,IAAI7C,KAAY,IAAPmB,GAItB,OAHc0B,EAAK0C,WAGJ,KAFC,IAAM1C,EAAK2C,cAEEC,QAAQ,K,kCAG1BtE,GAGX,OAFa,IAAInB,KAAY,IAAPmB,GACHoE,a,6EAIAtE,G,4FACb,IAAI4D,SAAQ,SAACC,EAASC,GAC3BhB,IAAQU,YAAYxD,GAAMoC,MACzB,SAACc,GACA,IAAMO,EAAcP,EAASE,QAAQ,GAAGM,SAASC,SACjD,EAAKnB,SAAS,CAAEhB,eAAgBiC,IAChCI,OAED,SAAClB,GACA,EAAKH,SAAS,CAAE7D,aAAc,yB,OAIjCiE,KAAKyB,cACJzB,KAAKvB,MAAMG,eAAeS,IAC1BW,KAAKvB,MAAMG,eAAeiD,K,kJAIPxC,EAAKC,GACzBU,KAAKyB,cAAcpC,EAAKC,K,2BAGpB/B,GACJ,OAAuB,GAAbA,EAAO,IAAW,GAAGuE,QAAQ,K,+BAG9B,IAAD,OACR,OACC,6BACC,yBAAK9F,UAAU,kBACd,kBAAC,IAAD,CACC+F,YAAY,iBACZC,gBAAiB,SAACC,QACEC,IAAfD,EAAM7E,KACT,EAAK+E,qBACJF,EAAMnB,SAASC,SAAS1B,MACxB4C,EAAMnB,SAASC,SAASc,OAGzB,EAAKO,cAAcH,EAAM7E,OAG3BiF,MAAO,CAAC,eAET,uBACCrG,UAAU,mBACVsG,KAAK,IACLC,QAAS,kBACR,EAAKd,cACJ,EAAKhD,MAAMC,mBAAmBW,IAC9B,EAAKZ,MAAMC,mBAAmBY,OANjC,8BAYD,kBAAC,EAAD,CACCxD,SAAUkE,KAAKvB,MAAM3C,SACrBC,aAAciE,KAAKvB,MAAM1C,aACzBG,QAAS8D,KAAK9D,QACdD,gBAAiB+D,KAAKvB,MAAMxC,gBAC5BW,KAAMoD,KAAKpD,KACXf,eAAgBmE,KAAKvB,MAAM5C,iBAE5B,kBAAC,EAAD,CACCC,SAAUkE,KAAKvB,MAAM3C,SACrBC,aAAciE,KAAKvB,MAAM1C,aACzBa,KAAMoD,KAAKpD,KACXI,cAAegD,KAAKvB,MAAMzB,cAC1BK,WAAY2C,KAAK3C,WACjBmF,YAAaxC,KAAKwC,mB,GA9MAC,aCYRC,E,2MAnBdC,QAAU,SAAAC,GACT,OAAIA,EAAElB,WAAa,GAAKkB,EAAElB,WAAa,GAC/B,QAEA,O,wEAIR,OACC,yBAAK1F,UAAS,UAAKgE,KAAK2C,QAAQ,IAAIxG,MAAtB,aACb,yBAAKH,UAAU,WACd,kBAAC,EAAD,Y,GAZgByG,aCWNI,G,wLAPb,OACC,yBAAK7G,UAAU,OACd,kBAAC,EAAD,W,GAJcyG,cCOEK,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCdNC,EAAQ,KAERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBnC,WACrBA,UAAUoC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEdC,OAAM,SAAA5D,GACL6D,QAAQ7D,MAAMA,EAAM8D,c","file":"static/js/main.6f1089e3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CurrentWeather = props => {\r\n\tlet currentWeatherValue = null;\r\n\tlet currentWeather = props.currentWeather;\r\n\r\n\tif (props.isLoaded === true && props.searchStatus === true) {\r\n\t\tcurrentWeatherValue = (\r\n\t\t\t<div className=\"weather-info\">\r\n\t\t\t\t<p className=\"weather-title\">{props.currentLocation}</p>\r\n\t\t\t\t<p>{props.getDate(new Date())}</p>\r\n\t\t\t\t<div className=\"weather-info-left\">\r\n\t\t\t\t\t<p className=\"weather-description\">\r\n\t\t\t\t\t\t{currentWeather.summary}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p className=\"weather-image\">\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={\r\n\t\t\t\t\t\t\t\tprocess.env.PUBLIC_URL +\r\n\t\t\t\t\t\t\t\t`/images/icons/${currentWeather.icon}.svg`\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\talt={currentWeather.summary}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<span className=\"degF\">\r\n\t\t\t\t\t\t\t{Math.round(currentWeather.temperature, 0)} &deg;F\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span className=\"degC\">\r\n\t\t\t\t\t\t\t{Math.round(\r\n\t\t\t\t\t\t\t\tprops.FtoC(currentWeather.temperature),\r\n\t\t\t\t\t\t\t\t2\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t&deg;C\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\tcurrentWeatherValue = <p className=\"not-found\">{props.searchStatus}</p>;\r\n\t}\r\n\treturn <div>{currentWeatherValue}</div>;\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from \"react\";\r\nimport {\r\n\tLineChart,\r\n\tLine,\r\n\tCartesianGrid,\r\n\tXAxis,\r\n\tYAxis,\r\n\tTooltip,\r\n\tResponsiveContainer\r\n} from \"recharts\";\r\n\r\nconst HourlyWeather = props => {\r\n\tlet data = [];\r\n\tlet hourlyWeatherValue = null;\r\n\r\n\tif (props.isLoaded === true && props.searchStatus === true) {\r\n\t\tconst hourlyWeather = props.hourlyWeather;\r\n\t\tfor (let i = 0; i < hourlyWeather.data.length; i++) {\r\n\t\t\tdata.push({\r\n\t\t\t\tname: props.updateTime(hourlyWeather.data[i].time),\r\n\t\t\t\ttemp: props.FtoC(hourlyWeather.data[i].temperature)\r\n\t\t\t});\r\n\t\t\tif (i > 7) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thourlyWeatherValue = (\r\n\t\t<div>\r\n\t\t\t<h2 className=\"small-title\">Weather forecast hourly</h2>\r\n\t\t\t<ResponsiveContainer width=\"100%\" height={200}>\r\n\t\t\t\t<LineChart data={data} fontSize=\"12\">\r\n\t\t\t\t\t<Line type=\"monotone\" dataKey=\"temp\" stroke=\"#8884d8\" />\r\n\t\t\t\t\t<CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\r\n\t\t\t\t\t<XAxis\r\n\t\t\t\t\t\tdataKey=\"name\"\r\n\t\t\t\t\t\tlabel={{\r\n\t\t\t\t\t\t\tvalue: \"Hour\",\r\n\t\t\t\t\t\t\tposition: \"bottom\",\r\n\t\t\t\t\t\t\toffset: -5,\r\n\t\t\t\t\t\t\tfontSize: 12,\r\n\t\t\t\t\t\t\tcolor: \"#333\"\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tinterval={0}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<YAxis\r\n\t\t\t\t\t\tallowDecimals={false}\r\n\t\t\t\t\t\tlabel={{\r\n\t\t\t\t\t\t\tvalue: \"Temperature\",\r\n\t\t\t\t\t\t\tangle: -90,\r\n\t\t\t\t\t\t\tfontSize: 12,\r\n\t\t\t\t\t\t\tcolor: \"#333\"\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Tooltip />\r\n\t\t\t\t</LineChart>\r\n\t\t\t</ResponsiveContainer>\r\n\t\t</div>\r\n\t);\r\n\r\n\treturn <div>{hourlyWeatherValue}</div>;\r\n};\r\n\r\nexport default HourlyWeather;\r\n","import React, { Component } from \"react\"\r\nimport Autocomplete from \"react-google-autocomplete\"\r\nimport Geocode from \"react-geocode\"\r\nimport CurrentWeather from \"./CurrentWeather\"\r\nimport HourlyWeather from \"./HourlyWeather\"\r\n\r\nconst api = {\r\n\tkey: \"e985b57d27d16a6af5f72b816e5afe31\",\r\n\tbase: \"https://thangnguyen24111990-eval-prod.apigee.net/weather/forecast\",\r\n}\r\n\r\nclass Weathers extends Component {\r\n\tstate = {\r\n\t\tisLoaded: false,\r\n\t\tcurrentCoordinates: {},\r\n\t\tcurrentLocation: \"\",\r\n\t\tcurrentTime: null,\r\n\t\tcurrentWeather: {},\r\n\t\tsearchStatus: false,\r\n\t\tnewCoordinates: {},\r\n\t\thourlyWeather: {},\r\n\t}\r\n\tfetchLocation(lat, lon) {\r\n\t\tfetch(`${api.base}/${api.key}/${lat},${lon}`)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then(\r\n\t\t\t\t(result) => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tisLoaded: true,\r\n\t\t\t\t\t\tcurrentWeather: result.currently,\r\n\t\t\t\t\t\thourlyWeather: result.hourly,\r\n\t\t\t\t\t\tsearchStatus: true,\r\n\t\t\t\t\t})\r\n\t\t\t\t},\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tisLoaded: true,\r\n\t\t\t\t\t\tsearchStatus: \"Searching...\",\r\n\t\t\t\t\t\terror,\r\n\t\t\t\t\t})\r\n\t\t\t\t},\r\n\t\t\t)\r\n\t\t\t.then(this.getLocationName(lat, lon))\r\n\t}\r\n\r\n\tgetLocationName(lat, lon) {\r\n\t\tGeocode.setApiKey(\"AIzaSyCO9x6JVamwo9b09PmJkpkUrYR3FI9mK6A\")\r\n\t\tGeocode.setLanguage(\"en\")\r\n\t\tGeocode.fromLatLng(lat, lon).then(\r\n\t\t\t(response) => {\r\n\t\t\t\tconst address = response.results[0]\r\n\t\t\t\tconst length = address.address_components.length\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tcurrentLocation: `${\r\n\t\t\t\t\t\taddress.address_components[length - 3].long_name\r\n\t\t\t\t\t} ${address.address_components[length - 1].long_name} ${\r\n\t\t\t\t\t\taddress.address_components[length - 2].short_name\r\n\t\t\t\t\t}`,\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tthis.setState({ currentLocation: \"Location not found\" })\r\n\t\t\t},\r\n\t\t)\r\n\t}\r\n\r\n\tgetLocationCoordinates(name) {\r\n\t\tGeocode.fromAddress(name).then(\r\n\t\t\t(response) => {\r\n\t\t\t\tconst coordinates = response.results[0].geometry.location\r\n\t\t\t\tthis.setState({ newCoordinates: coordinates })\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tthis.setState({ newCoordinates: \"City not found\" })\r\n\t\t\t},\r\n\t\t)\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tawait new Promise((resolve, reject) => {\r\n\t\t\tif (navigator.geolocation) {\r\n\t\t\t\tnavigator.geolocation.getCurrentPosition((position) => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tcurrentCoordinates: {\r\n\t\t\t\t\t\t\tlat: position.coords.latitude,\r\n\t\t\t\t\t\t\tlon: position.coords.longitude,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t\tresolve()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.fetchLocation(\r\n\t\t\tthis.state.currentCoordinates.lat,\r\n\t\t\tthis.state.currentCoordinates.lon,\r\n\t\t)\r\n\t}\r\n\r\n\tgetDate = (d) => {\r\n\t\tlet months = [\r\n\t\t\t\"January\",\r\n\t\t\t\"February\",\r\n\t\t\t\"March\",\r\n\t\t\t\"April\",\r\n\t\t\t\"May\",\r\n\t\t\t\"June\",\r\n\t\t\t\"July\",\r\n\t\t\t\"August\",\r\n\t\t\t\"September\",\r\n\t\t\t\"October\",\r\n\t\t\t\"November\",\r\n\t\t\t\"December\",\r\n\t\t]\r\n\t\tlet days = [\r\n\t\t\t\"Sunday\",\r\n\t\t\t\"Monday\",\r\n\t\t\t\"Tuesday\",\r\n\t\t\t\"Wednesday\",\r\n\t\t\t\"Thursday\",\r\n\t\t\t\"Friday\",\r\n\t\t\t\"Saturday\",\r\n\t\t]\r\n\r\n\t\tlet day = days[d.getDay()]\r\n\t\tlet date = d.getDate()\r\n\t\tlet month = months[d.getMonth()]\r\n\t\tlet year = d.getFullYear()\r\n\r\n\t\treturn `${day} ${date} ${month} ${year}`\r\n\t}\r\n\r\n\tupdateTime(time) {\r\n\t\tconst date = new Date(time * 1000)\r\n\t\tconst hours = date.getHours()\r\n\t\tconst minutes = \"0\" + date.getMinutes()\r\n\r\n\t\treturn hours + \":\" + minutes.substr(-2)\r\n\t}\r\n\r\n\tgetHourOnly(time) {\r\n\t\tconst date = new Date(time * 1000)\r\n\t\tconst hours = date.getHours()\r\n\t\treturn hours\r\n\t}\r\n\r\n\tasync fetchWithName(name) {\r\n\t\tawait new Promise((resolve, reject) => {\r\n\t\t\tGeocode.fromAddress(name).then(\r\n\t\t\t\t(response) => {\r\n\t\t\t\t\tconst coordinates = response.results[0].geometry.location\r\n\t\t\t\t\tthis.setState({ newCoordinates: coordinates })\r\n\t\t\t\t\tresolve()\r\n\t\t\t\t},\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tthis.setState({ searchStatus: \"City not found\" })\r\n\t\t\t\t},\r\n\t\t\t)\r\n\t\t})\r\n\t\tthis.fetchLocation(\r\n\t\t\tthis.state.newCoordinates.lat,\r\n\t\t\tthis.state.newCoordinates.lng,\r\n\t\t)\r\n\t}\r\n\r\n\tfetchWithCoordinates(lat, lon) {\r\n\t\tthis.fetchLocation(lat, lon)\r\n\t}\r\n\r\n\tFtoC(temp) {\r\n\t\treturn (((temp - 32) * 5) / 9).toFixed(3)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className='weather-search'>\r\n\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\tplaceholder='Search by city'\r\n\t\t\t\t\t\tonPlaceSelected={(place) => {\r\n\t\t\t\t\t\t\tif (place.name === undefined) {\r\n\t\t\t\t\t\t\t\tthis.fetchWithCoordinates(\r\n\t\t\t\t\t\t\t\t\tplace.geometry.location.lat(),\r\n\t\t\t\t\t\t\t\t\tplace.geometry.location.lng(),\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.fetchWithName(place.name)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\ttypes={[\"(regions)\"]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<a\r\n\t\t\t\t\t\tclassName='current-location'\r\n\t\t\t\t\t\thref='#'\r\n\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\tthis.fetchLocation(\r\n\t\t\t\t\t\t\t\tthis.state.currentCoordinates.lat,\r\n\t\t\t\t\t\t\t\tthis.state.currentCoordinates.lon,\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}>\r\n\t\t\t\t\t\tUse your current location\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<CurrentWeather\r\n\t\t\t\t\tisLoaded={this.state.isLoaded}\r\n\t\t\t\t\tsearchStatus={this.state.searchStatus}\r\n\t\t\t\t\tgetDate={this.getDate}\r\n\t\t\t\t\tcurrentLocation={this.state.currentLocation}\r\n\t\t\t\t\tFtoC={this.FtoC}\r\n\t\t\t\t\tcurrentWeather={this.state.currentWeather}\r\n\t\t\t\t/>\r\n\t\t\t\t<HourlyWeather\r\n\t\t\t\t\tisLoaded={this.state.isLoaded}\r\n\t\t\t\t\tsearchStatus={this.state.searchStatus}\r\n\t\t\t\t\tFtoC={this.FtoC}\r\n\t\t\t\t\thourlyWeather={this.state.hourlyWeather}\r\n\t\t\t\t\tupdateTime={this.updateTime}\r\n\t\t\t\t\tgetHourOnly={this.getHourOnly}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Weathers\r\n","import React, {Component} from \"react\";\r\nimport Weathers from \"../components/Weather/Weathers\";\r\n\r\nclass Layout extends Component {\r\n\tgetTime = t => {\r\n\t\tif (t.getHours() < 6 || t.getHours() > 18) {\r\n\t\t\treturn \"night\";\r\n\t\t} else {\r\n\t\t\treturn \"day\";\r\n\t\t}\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={`${this.getTime(new Date())} wrapper`}>\r\n\t\t\t\t<div className=\"weather\">\r\n\t\t\t\t\t<Weathers />\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Layout;\r\n","import React, {Component} from \"react\";\r\nimport Layout from \"./Layout/Layout\";\r\n\r\nimport \"./App.scss\";\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Layout />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nrequire('typeface-open-sans');\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}